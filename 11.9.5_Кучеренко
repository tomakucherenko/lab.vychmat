{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from math import sin, cos, pi \n",
    "def f(x):\n",
    "    return cos(2*pi*x)\n",
    "\n",
    "def P2(x):\n",
    "    return 10 + sin(2*pi*x)\n",
    "\n",
    "\n",
    "h = 0.005\n",
    "N = int(1 / h)\n",
    "\n",
    "\n",
    "b = []\n",
    "for i in range(N):\n",
    "    b.append(f(i*h)*(h**2))\n",
    "\n",
    "a = []\n",
    "for i in range(N):\n",
    "    d = []\n",
    "    for j in range(N):\n",
    "        if(i==j):\n",
    "            d.append(-2-(h**2)*P2(j*h))\n",
    "        else:\n",
    "            if((j-i == 1) | ((i == N-1)&(j == 0))):\n",
    "                d.append(1)\n",
    "            else:\n",
    "                if((i-j == 1) | ((i==0)&(j==N-1))): \n",
    "                    d.append(1)\n",
    "                else:\n",
    "                    d.append(0)\n",
    "    a.append(d)\n",
    "    \n",
    "import numpy \n",
    "A = numpy.array(a)\n",
    "B = numpy.array(b)\n",
    "\n",
    "\n",
    "y = numpy.linalg.solve(A,B)\n",
    "#print(y)\n",
    "x = []\n",
    "for i in range(N):\n",
    "    x.append(i*h)\n",
    "x = numpy.array(x)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(x,y)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
